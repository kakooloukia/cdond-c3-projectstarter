version: 2.1
orbs:
  slack: circleci/slack@4.7.1
  aws-cli: circleci/aws-cli@1.3.0

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: << parameters.workflow_id >>"
            # aws s3 rm s3://udapeople-<< parameters.workflow_id >> --recursive
            # aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.workflow_id >>
            # aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.workflow_id >>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # kvdb.io GET URL code goes here
            # Example: kvdb.io
            SUCCESS=$(curl --insecure https://kvdb.io/Nxwo4oeUzcT5ZR7nWqqSzD/migration_<< parameters.workflow_id >>)
            # Logic for reverting the database state
            if test $SUCCESS -eq 1
            then
                cd ~/project/backend
                npm install
                npm run migrations:revert
            fi

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run front-end tests
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1

  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run back-end tests
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Run back-end tests
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run back-end tests
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            npm audit fix --audit-level=critical
            npm audit --audit-level=critical
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar utility
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople

      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
              --tags project=udapeople
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            touch inventory.txt
            echo [web] > inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/inventory.txt
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          event: fail
          template: basic_fail_1

  configure-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5c:c4:d4:d6:f6:4f:2a:31:39:67:a7:49:cb:dc:72:8d"]
      - run:
          name: Install dependencies
          command: |
           yum install -y tar gzip python3 python3-pip openssh-clients
           pip3 install ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory.txt ./.circleci/ansible/configure-server.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          event: fail
          template: basic_fail_1

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
        user: root
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            apt-get update
            apt install -y awscli
      - run:
          name: Update backend env file
          command: |
            echo "NODE_ENV=production" >> backend/.env
            echo "VERSION=1" >> backend/.env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # npm audit fix --audit-level=critical
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                # using kvdb.io, generate the bucket ID "Nxwo4oeUzcT5ZR7nWqqSzD" in your local terminal first
                curl --insecure https://kvdb.io/Nxwo4oeUzcT5ZR7nWqqSzD/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-frontend:
    docker:
      - image: amazon/aws-lambda-nodejs
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
           yum install -y tar gzip python3 python3-pip openssh-clients awscli
           pip3 install ansible
      - attach_workspace:
          at: ~/
      - run:
          name: Upload to S3 bucket
          command: |
            # Clean Origin and Upload all contents of the current directory to the S3 bucket
            aws s3 sync . s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --delete
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text)
            API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          event: fail
          template: basic_fail_1

  deploy-backend:
    docker:
      - image: amazon/aws-lambda-nodejs
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["5c:c4:d4:d6:f6:4f:2a:31:39:67:a7:49:cb:dc:72:8d"]
      - run:
          name: Install dependencies
          command: |
           yum install -y tar gzip python3 python3-pip openssh-clients awscli
           pip3 install ansible
      - attach_workspace:
          at: ~/
      - run:
          name: add ansible config
          command: |
            echo "[ssh_connection]" > ansible.cfg
            echo "scp_if_ssh=True" >> ansible.cfg

      # Todo: Test without env here
      - run:
          name: Update backend env file
          command: |
            echo "NODE_ENV=production" >> backend/.env
            echo "VERSION=1" >> backend/.env
            echo "TYPEORM_CONNECTION=${TYPEORM_CONNECTION}" >> backend/.env
            echo "TYPEORM_MIGRATIONS_DIR=${TYPEORM_MIGRATIONS_DIR}" >> backend/.env
            echo "TYPEORM_ENTITIES=${TYPEORM_ENTITIES}" >> backend/.env
            echo "TYPEORM_MIGRATIONS=${TYPEORM_MIGRATIONS}" >> backend/.env
            echo "TYPEORM_HOST=${TYPEORM_HOST}" >> backend/.env
            echo "TYPEORM_PORT=${TYPEORM_PORT}" >> backend/.env
            echo "TYPEORM_USERNAME=${TYPEORM_USERNAME}" >> backend/.env
            echo "TYPEORM_PASSWORD=${TYPEORM_PASSWORD}" >> backend/.env
            echo "TYPEORM_DATABASE=${TYPEORM_DATABASE}" >> backend/.env

      #### TODO: REMOVE THAT ####
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            touch inventory.txt
            echo [web] > inventory.txt
            aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text >> inventory.txt
      ######### End TOTO ########

      - run:
          name: Deploy backend
          command: |
            # build
            cd backend
            npm i
            npm run build
            cd ..

            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .

            echo "inventory.txt is:"
            cat inventory.txt

            # Deploy
            ansible-playbook -i inventory.txt -vvv .circleci/ansible/deploy-backend.yml
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          event: fail
          template: basic_fail_1

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl
            pip install awscli
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_URL=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:project,Values=udapeople" \
              --output text)

            export API_URL="http://${BACKEND_URL}:3030"
            echo "${API_URL}"
            if curl "${API_URL}/api/status" | grep "ok"
            then
                return 0
            else
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          event: fail
          template: basic_fail_1

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations:
          workflow_id: ${CIRCLE_WORKFLOW_ID:0:7}
      - slack/notify:
          event: fail
          template: basic_fail_1

  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Remove old stacks and files
          command: |
            ## Get old stack and workflow_id values

            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                list-exports \
                --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"

            # Fetch the stack names
            export STACKS=$(aws cloudformation \
                list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE \
                --no-paginate \
                --output text)
            echo Stack names: "${STACKS[@]}"

            # Process Cleanup
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
         requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
